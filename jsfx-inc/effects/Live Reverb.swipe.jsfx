// Small Room Reverberator
// 
// Implemented as proposed in "The Virtual Acoustic Room" by William Grant Gardner
//                            (http://www.media.mit.edu/~billg/docs/ms-thesis.ps.gz)
//

// 3x3 3 band EQ with harmonic enhancement (6dB slopes)
//
// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

desc: Geep Live Reverb - Gardner Reverb + 3x3 3 Band EQ with Harmonic Enhancement (6dB slopes)

EffectName: Live Reverb
VendorString: Geep
VendorVersion: 1000
UniqueId: 4562
InstallPath: C:\Program Files\VST\Geep Effects Pack\

import Live Reverb.swipe.jsfx
import swipe.jsfx-inc

slider10:30<0,100,1>-Dampening (%)
slider13:-1<-1,1,0.1>-Stereo Width

slider21:75<0,100,0.2>-L Drive (%)
slider22:9<-16,16,0.2>-L Gain (dB)
slider23:0<0,100,0.2>-M Drive (%)
slider24:0<-16,16,0.2>-M Gain (dB)
slider25:75<0,100,0.2>-H Drive (%)
slider26:12<-16,16,0.2>-H Gain (dB)
slider27:30<20,200,1>-L <> M (Hz)
slider28:8000<720,12000,10>-M <> H (Hz)

slider60:-0.5<-1,1,0.01>-Dry <> Wet
slider63:-3<-24,3,0.5>-Center (dB)
slider64:-3<-24,3,0.5>-Output (dB)

@init

// Disable float error checking. Doesn't work for all effects.
!"#define VAL(A) (A)" "//";


// REVERB

a0_pos = 0;
a1_pos = 0;
a2_pos = 0;
a3_pos = 0;
a4_pos = 0;
a0r_pos = 0;
a1r_pos = 0;
a2r_pos = 0;
a3r_pos = 0;
a4r_pos = 0;
tmp = 0;
tmpr = 0;
t = 0;
tr = 0;

// BAND EQ

log2db = 8.6858896380650365530225783783321; // 20 / ln(10)
db2log = 0.11512925464970228420089957273422; // ln(10) / 20
pi = 3.1415926535;
halfpi = pi / 2;
halfpiscaled = halfpi * 1.41254;

cDenorm = 10^-30;

@sample

SliderChanged() ? (

  // REVERB
  
  wet = exp(slider12/8.65617);
  dry = exp(slider11/8.65617);
  g = 1-slider10/100;
  
  a0 = 0;
  a0_len = (srate*35/1000)|0;
  a0_g = 0.3;
  
  a1 = a0+a0_len+1;
  a1_len = (srate*22/1000)|0;
  a1_g = 0.4;
  
  a2 = a1+a1_len+1;
  a2_len = (srate*8.3/1000)|0;
  a2_g = 0.6;
  
  a3 = a2+a2_len+1;
  a3_len = (srate*66/1000)|0;
  a3_g = 0.1;
  
  a4 = a3+a3_len+1;
  a4_len = (srate*30/1000)|0;
  a4_g = 0.4;
  
  // scatter second channels delay length's to give stereo spread
  rndcoef = 50;
  
  a0r = a4+a4_len+1;
  a0r_len = ((srate*35/1000)|0)+rndcoef;
  
  a1r = a0r+a0r_len+1;
  a1r_len = ((srate*22/1000)|0)-rndcoef;
  
  a2r = a1r+a1r_len+1;
  a2r_len = ((srate*8.3/1000)|0)+rndcoef;
  
  a3r = a2r+a2r_len+1;
  a3r_len = ((srate*66/1000)|0)-rndcoef;
  
  a4r = a3r+a3r_len+1;
  a4r_len = ((srate*30/1000)|0)+rndcoef;
  
  // the lowpass isn't sepcified any further so we use a simple RC filter
  c = exp(-2*3.14*4200/srate);

  // Register memory usage with system.
  // Unsure if this is correct, so needs testing. Only
  // required if we want to allocate memory for extra effects.
  heap.max(a4r + a4r_len + 1);
  
  // BAND EQ
  
  mixl = slider21 / 100;
  mixm = slider23 / 100;
  mixh = slider25 / 100;
  
  freqLP = min(min(slider27,srate),slider28);//freqHP);
  xLP = exp(-2.0*$pi*freqLP/srate);
  a0LP = 1.0-xLP;
  b1LP = -xLP;
  
  freqHP = max(min(slider28,srate),freqLP);
  xHP = exp(-2.0*$pi*freqHP/srate);
  
  a0HP = 1.0-xHP;
  b1HP = -xHP;
  
  mixl1 = 1 - mixl;
  mixm1 = 1 - mixm;
  mixh1 = 1 - mixh;
  gainl = exp(slider22 * db2log);
  gainm = exp(slider24 * db2log);
  gainh = exp(slider26 * db2log);
  mixlg = mixl * gainl;
  mixmg = mixm * gainm;
  mixhg = mixh * gainh;
  mixlg1 = mixl1 * gainl;
  mixmg1 = mixm1 * gainm;
  mixhg1 = mixh1 * gainh;
  
  // Reverb Stereo Width
  
  level.wid0 = (slider13 + 1) * 0.5;
  level.wid1 = (1 - slider13) * 0.5;
  
  // Output Settings
  
  level.wet = (slider60 + 1) * 0.5;
  level.dry = (1 - slider60) * 0.5;
  level.mid = exp(slider63 * db2log);
  level.out = exp(slider64 * db2log);
);

// REVERB

// left channel

in = spl0 + tmp*g;

// ---- AP 1
a0_in = in;
a0_out = -a0_in*a0_g + a2_out;
a1_in = a0_in + a0_out*a0_g;

// -> nested
  a1_out = -a1_in*a1_g + a1[a1_pos];
  a1[a1_pos] = a1_in + a1_out*a1_g;
  (a1_pos+=1) >= a1_len ? a1_pos = 0;

  a2_in = a1_out;
  a2_out = -a2_in*a2_g + a2[a2_pos];
  a2[a2_pos] = a2_in + a2_out*a2_g;
  (a2_pos+=1) >= a2_len ? a2_pos = 0;

  // delay
  a0[a0_pos] = a2_out;
  (a0_pos+=1) >= a0_len ? a0_pos = 0;
  a2_out = a0[a0_pos];
// <-

// ---- end AP 1

// ---- AP 2
a3_in = a0_out;
a3_out = -a3_in*a3_g + a4_out;
a4_in = a3_in + a3_out*a3_g;

// -> nested 
  a4_out = -a4_in*a4_g + a4[a4_pos];
  a4[a4_pos] = a4_in + a4_out*a4_g;
  (a4_pos+=1) >= a4_len ? a4_pos = 0;

  // delay
  a3[a3_pos] = a4_out;
  (a3_pos+=1) >= a3_len ? a3_pos = 0;
  a4_out = a3[a3_pos];
// <-

// ---- end AP 2

tmp = a3_out;
tmp = (t = tmp + c*(t-tmp));

out = a0_out*0.5 + a3_out*0.5;

rev0 = out;


// right channel

in = spl1 + tmpr*g;

// ---- AP 1
a0r_in = in;
a0r_out = -a0r_in*a0_g + a2r_out;
a1r_in = a0r_in + a0r_out*a0_g;

// -> nested
  a1r_out = -a1r_in*a1_g + a1r[a1r_pos];
  a1r[a1r_pos] = a1r_in + a1r_out*a1_g;
  (a1r_pos+=1) >= a1r_len ? a1r_pos = 0;

  a2r_in = a1r_out;
  a2r_out = -a2r_in*a2_g + a2r[a2r_pos];
  a2r[a2r_pos] = a2r_in + a2r_out*a2_g;
  (a2r_pos+=1) >= a2r_len ? a2r_pos = 0;

  // delay
  a0r[a0r_pos] = a2r_out;
  (a0r_pos+=1) >= a0r_len ? a0r_pos = 0;
  a2r_out = a0r[a0r_pos];
// <-

// AP 2
a3r_in = a0r_out;
a3r_out = -a3r_in*a3_g + a4r_out;
a4r_in = a3r_in + a3r_out*a3_g;

// -> nested 
  a4r_out = -a4r_in*a4_g + a4r[a4r_pos];
  a4r[a4r_pos] = a4r_in + a4r_out*a4_g;
  (a4r_pos+=1) >= a4r_len ? a4r_pos = 0;

  // delay
  a3r[a3r_pos] = a4r_out;
  (a3r_pos+=1) >= a3r_len ? a3r_pos = 0;
  a4r_out = a3r[a3r_pos];
// <-

tmpr = a3r_out;
tmpr = (tr = tmpr + c*(tr-tmpr));

out = a0r_out*0.5 + a3r_out*0.5;

rev1 = out;

// BAND EQ

dry0 = spl0 * level.dry + (rev0 * level.wid0 + rev1 * level.wid1) * level.wet;
dry1 = spl1 * level.dry + (rev0 * level.wid1 + rev1 * level.wid0) * level.wet;

low_l = (tmplLP = a0LP*dry0 - b1LP*tmplLP + cDenorm);
low_r = (tmprLP = a0LP*dry1 - b1LP*tmprLP + cDenorm);

high_l = dry0 - (tmplHP = a0HP*dry0 - b1HP*tmplHP + cDenorm);
high_r = dry1 - (tmprHP = a0HP*dry1 - b1HP*tmprHP + cDenorm);

mid_l = dry0 - low_l - high_l;
mid_r = dry1 - low_r - high_r;

wet0_l = mixlg * axSin(low_l * halfpiscaled);
wet0_m = mixmg * axSin(mid_l * halfpiscaled);
wet0_h = mixhg * axSin(high_l * halfpiscaled);
wet0 = (wet0_l + wet0_m + wet0_h);

dry0_l = low_l * mixlg1;
dry0_m = mid_l * mixmg1;
dry0_h = high_l * mixhg1;
dry0 = (dry0_l + dry0_m + dry0_h);

wet1_l = mixlg * axSin(low_r * halfpiscaled);
wet1_m = mixmg * axSin(mid_r * halfpiscaled);
wet1_h = mixhg * axSin(high_r * halfpiscaled);
wet1 = (wet1_l + wet1_m + wet1_h);

dry1_l = low_r * mixlg1;
dry1_m = mid_r * mixmg1;
dry1_h = high_r * mixhg1;
dry1 = (dry1_l + dry1_m + dry1_h);

spl0 = (dry0 + wet0) * level.out;
spl1 = (dry1 + wet1) * level.out;

out_mid = (spl0 + spl1) * 0.5 * level.mid;
out_sid = (spl0 - spl1) * 0.5;

spl0 = out_mid + out_sid;
spl1 = out_mid - out_sid;

@init

// SWIPE Interface Functions.

function TKnobs() global()
(
  this.Damp.TWidget(10, 0, 100, "Dampening", "%", 30);
  this.Width.TWidget(13, -1, 1, "Width", "", -1);
  this.Mix.TWidget(60, -1, 1, "Mix", "", -0.5);
  this.Center.TWidget(63, -24, 3, "Center", "dB", -3);
  this.Output.TWidget(64, -24, 3, "Output", "dB", -3);
);

function TKnobs_Draw(x1, y1, x2, y2) 
global(SWIPE*, knobs*) 
local(xx, yy)
(
  GfxDrawGroupBox(x1, y1, x2, y2, "Reverb Mix");
  
  y1 += 25;
  y2 -= 10;
  xx = (x2 - x1) / 5; 
    
  this.Damp.TKnob_Draw(x1, y1, x1 + xx, y2, knobs.0); x1 += xx;
  this.Width.TKnob_Draw(x1, y1, x1 + xx, y2, knobs.0); x1 += xx;
  this.Mix.TKnob_Draw(x1, y1, x1 + xx, y2, knobs.0); x1 += xx;
  this.Center.TKnob_Draw(x1, y1, x1 + xx, y2, knobs.0); x1 += xx;
  this.Output.TKnob_Draw(x1, y1, x1 + xx, y2, knobs.0); x1 += xx;
);

function TGainDrive(AGainId, ADriveId, ATitle, ADefGain, ADefDrive) global()
(
  this.Gain.TWidget(AGainId, -16, 16, ATitle, "dB", ADefGain);
  this.Drive.TWidget(ADriveId, 0, 100, "Drive", "%", ADefDrive);
);

function TGainDrive_Draw(x1, y1, x2, y2) global(SWIPE*, knobs*)
(
  this.Gain.TSliderVert_Draw(x1 + 15, y1, x2 - 15, y2 - 90); 
  this.Drive.TKnob_Draw(x1, y2 - 80, x2, y2, knobs.1); 
);

function TChannels() global()
(
  this.L.TGainDrive(22, 21, "Low", 9, 75);
  this.M.TGainDrive(24, 23, "Medium", 0, 0);
  this.H.TGainDrive(26, 25, "High", 12, 75);
);

function TChannels_Draw(x1, y1, x2, y2) global() local(xx)
(
  GfxDrawGroupBox(x1, y1, x2, y2, "3 Band Channel EQ");
  x1 += 4; x2 -= 4;
  y1 += 20; y2 -= 10;
  xx = (x2 - x1) / 3;  
  this.L.TGainDrive_Draw(x1, y1, x1 + xx, y2); x1 += xx; 
  this.M.TGainDrive_Draw(x1, y1, x1 + xx, y2); x1 += xx; 
  this.H.TGainDrive_Draw(x1, y1, x1 + xx, y2); x1 += xx; 
);

function TSplitters() global()
(
  this.Split1.TWidget(27, 20, 200, "Splitter L<>M", "Hz", 30);
  this.Split2.TWidget(28, 720, 12000, "Splitter M<>H", "Hz", 8000);
);

function TSplitters_Draw(x1, y1, x2, y2) global()
(
  GfxDrawGroupBox(x1, y1, x2, y2, "3 Band Splitter Freqs");
  x2 -= 10;
  y1 += 30;
  y2 = 25;
  this.Split1.TSliderHorz_Draw(x1, y1, x2, y1 + y2); y1 += y2 + 10;
  this.Split2.TSliderHorz_Draw(x1, y1, x2, y1 + y2);
);
  
// Define Widgets

Knobs.TKnobs();
Channels.TChannels();
Splitters.TSplitters();

@gfx 640 380

SWIPE(640, 380) ? (
  //GfxSetColorTint(0.6, 0.7, 1.0);
  _Effect.TEffectBasic(
    "Geep Live Reverb", 
    "License LGPL / Copyright (C) 2015 Derek J. Evans", 
    "Reverb"); 
    
  knobs.TObject() ? (
    knobs.0.TImage_LoadFromFile("data/knobs/knob_64_white1.png");
    knobs.1.TImage_LoadFromFile("data/knobs/knob_32_white.png");
  );
  Channels.TChannels_Draw(30, 65, 200, gfx_h - 50); 
  Knobs.TKnobs_Draw(220, 65, gfx_w - 30, 210);  
  Splitters.TSplitters_Draw(220, 220, gfx_w - 30, gfx_h - 50);
  
  _Effect.TEffect_Done();  
    
);

