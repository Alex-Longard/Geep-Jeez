/*
** Name: memory
** Desc: This is part of a ANSI C style library for Jesusonic.
** Auth: Derek John Evans
**
** Copyright (C) 2015 Derek John Evans
**
** License: LGPL - http://www.gnu.org/licenses/gpl.html
*/

import std.cstdlib.jsfx-inc

@init

// Returns a direct pointer to the memory array used internally by the vector to store its owned elements.
function data() global()
(
  this;
);

// Returns the number of elements of a memory block or string.
function size() global()
(
  this ? mcheck(this) ? _msize(this) : strlen(this) : 0;
);

function begin() global()
(
  0;
);

function end() global()
(
  this.size() - 1;
);

function get(idx) global()
(
  this ? mcheck(this) ? this[idx] : str_getchar(this, idx) : 0;
);

function set(idx, value) global()
(
  this ? mcheck(this) ? this[idx] = value : str_setchar(this, idx, value) : 0;
);


// Resizes memory or string so that it contains n elements.
function resize(n) global()
(  
  !this || mcheck(this) ? this = realloc(this, n, 1) : str_setlen(this, n);
);

// Removes all elements from memory/string, leaving the container with a size of 0.
function clear() global()
(
  this.resize(0);
);

function empty() global()
(
  this.resize(0);
);

// Returns the first element in the vector.
function front() global()
(
  this.get(this.begin());
);

// Returns the last element in the vector.
function back() global()
(
  this.get(this.end());
);

function fill(value, begin, end) global()
(
  while (begin <= end) (
    this.set(begin, value);
    begin += 1;
  );
  this;
);

function fill(value, begin) global()
(
  this.fill(value, begin, this.end());
);

function fill(value) global()
(
  this.fill(value, this.begin());
);

function find(value, begin, end) global() 
(
  while (begin <= end && this.get(begin) != value) ( begin += 1; );
  begin <= end ? begin : -1;  
);

function find(value, begin) global()
(
  this.find(value, begin, this.end());
);

function find(value) global()
(
  this.find(value, this.begin());
);

function rfind(value, begin, end) global()
(
  while (begin <= end && this.get(end) != value) ( end -= 1; );
  begin <= end ? end : -1;
);

function rfind(value, begin) global()
(
  this.rfind(value, begin, this.end());
);

function rfind(value) global()
(
  this.rfind(value, this.begin());
);

function count(value, begin end) global() local(count)
(
  count = 0;
  while (begin <= end) (
    this.get(begin) == value ? count += 1;
    begin += 1;
  );
  count;
);

function count(value, begin) global()
(
  this.count(value, begin, this.end());
);

function count(value) global()
(
  this.count(value, this.begin());
);

function reverse(begin, end) global() local(value)
(
  while (begin <= end) (
    value = this.get(begin);
    this.set(begin, this.get(end));
    this.set(end, value);
    begin += 1;
    end -= 1;
  );
  this;
);

