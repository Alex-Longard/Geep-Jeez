/*
	TDFII.jsfx-inc

	Copyright 2006-7
		David Yeh <dtyeh@ccrma.stanford.edu> (implementation)
	2006-14
		Tim Goetze <tim@quitte.de> (cosmetics)

	transposed Direct Form II digital filter.
	Assumes order of b = order of a.
	Assumes a0 = 1.

*/
/*
	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 3
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA or point your web browser to http://www.gnu.org.
*/

import std.cstdlib.jsfx-inc

@init

/* N is the highest power of s in the transfer function */
function TDFII(_N) global() instance(N, a, b, h)
(
  N = _N;
  a = malloc(_N + 1);
  b = malloc(_N + 1);
  h = malloc(_N + 1);
);

function TDFII_clear() global() instance(N, a, b) local(i)
(
  i = 0; 
  while (i <= N) (
    a[i] = b[i] = 0;
    i += 1;
  );
  b[0] = 1;
);
			
function TDFII_reset() global() instance(N, h) local(i)
(
  i = 0;
  while (i <= N) (
    h[i] = 0; // zero state
    i += 1;
  );
);

function TDFII_init(fs) global()
(
  this.TDFII_reset();
  this.TDFII_clear();
);

/* per-band recursion:
 * 	y = 2 * (a * (x - x[-2]) + c * y[-1] - b * y[-2])
 */
function TDFII_process(s) global() instance(N, h, b, a) local(i, y)
(
  y = h[0] + b[0]*s;
  i = 1;
  while (i < N) (
    h[i-1] = h[i] + b[i]*s - a[i]*y;
    i += 1;
  );
  h[N-1] = b[N]*s - a[N]*y;
  y;
);

