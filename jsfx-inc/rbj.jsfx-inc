@init

// Init filter given frequency, attenuation and Q factor.
function RBJ.InitFAQ(F, A, Q) global(srate)
( 
  this.A = A;
  this.w0 = 2 * $pi * F / srate;
  this.cos = cos(this.w0);
  this.sin = sin(this.w0);
  this.alpha = this.sin / (2 * Q);
);

// Init filter given frequency and Q factor.
function RBJ.InitFQ(F, Q) global()
(
  this.RBJ.InitFAQ(F, 0, Q);
);

// Init filter given frequency, attenuation and shelf slope.
function RBJ.InitFAS(F, A, S) global()
(
  this.RBJ.InitFAQ(F, A, 1 / (sqrt((A + 1 / A) * (1 / S - 1) + 2)));
);

// Init filter given frequency and attenuation.
function RBJ.InitFA(F, A) global()
(
  this.RBJ.InitFAS(F, A, 1);
);

function RBJ.InitFGS1(F, G, S) global()
(
  this.RBJ.InitFAS(F, sqrt(10 ^ (G / 20)), S);
);

function RBJ.InitFGS1(F, G) global()
(
  this.RBJ.InitFGS1(F, G, 1);
);

function RBJ.InitFGS2(F, G, S) global()
(
  this.RBJ.InitFAS(F, 10 ^ (G / 40), S);
);

function RBJ.InitFGS2(F, dBgain) global()
(
  this.RBJ.InitFGS2(F, dBgain, 1);
);

function RBJ.Invert() global()
instance(a0, a1, a2, b0, b1, b2)
(
  b0 /= a0; b1 /= a0; b2 /= a0;
  a1 /= a0; a2 /= a0;
  0;
);

function RBJ.Sample(spl) global()
instance(b0, b1, b2, a1, a2, x1, x2, y1, y2)
local(op)
(
  op = b0 * spl + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;
  x2 = x1; x1 = spl; y2 = y1; y1 = op;
);

function RBJ.LPF() global()
instance(alpha, cos, a0, a1, a2, b0, b1, b2)
(
  b0 = (1 - cos) / 2;
  b1 = (1 - cos);
  b2 = (1 - cos) / 2;
  a0 = 1 + alpha;
  a1 = -2 * cos;
  a2 = 1 - alpha;
  this.RBJ.Invert();
);

function RBJ.HPF() global()
instance(alpha, cos, a0, a1, a2, b0, b1, b2)
(
  b0 =  (1 + cos) / 2;
  b1 = -(1 + cos);
  b2 =  (1 + cos) / 2;
  a0 =   1 + alpha;
  a1 =  -2 * cos;
  a2 =   1 - alpha;
  this.RBJ.Invert();
);

function RBJ.Notch() global()
instance(alpha, cos, a0, a1, a2, b0, b1, b2)
(
  b0 =   1;
  b1 =  -2 * cos;
  b2 =   1;
  a0 =   1 + alpha;
  a1 =  -2 * cos;
  a2 =   1 - alpha;
  this.RBJ.Invert();
);

function RBJ.APF() global()
instance(alpha, cos, a0, a1, a2, b0, b1, b2)
(
  b0 =   1 - alpha;
  b1 =  -2 * cos;
  b2 =   1 + alpha;
  a0 =   1 + alpha;
  a1 =  -2 * cos;
  a2 =   1 - alpha;
  this.RBJ.Invert();
);

function RBJ.PeakEq() global()
instance(alpha, cos, a0, a1, a2, b0, b1, b2, A)
(
  b0 =   1 + alpha * A;
  b1 =  -2 * cos;
  b2 =   1 - alpha * A;
  a0 =   1 + alpha / A;
  a1 =  -2 * cos;
  a2 =   1 - alpha / A;
  this.RBJ.Invert();
);


